				
				CHB Notes and manual

Version: 0.01 Pre-Alpha


					0.	Introduction

(C)omputers (H)elp (B)ootloader is a two-stage bootloader
implemented for x86 architecture (x86_64, ix86)

This is the first version of CHB, which means that it is not the 
final version of the bootloader.

This code implements a bootloader for x86 legacy/BIOS systems
for run simple kernels. At the moment the CHB only works 
for loading binary kernel files

Anyone is FREE to contribute to the CHB project if they are interested. 
I encourage anyone interested in this project to contribute to it.
		
					1. Building Tutorial
					
To build CHB bootloader you must have the following tools
	
	1) GCC Cross compiler for x86_64 or ix86 that generates ELF 
	   executables (I recommend that it be a version greater than 10.1.0)
	2) GNU-LD The linker for your compiler, that generates ELF executables
	   for x86_64 or ix86 (I recommend that it be a version greater than 2.35)

The makefile doesn't do version checks for the linker and compiler because 
I don't know what older versions are like, I choose the version I currently 
have in my LINUX environment. If someone wants to make a port for previous 
versions of CHB, I encourage them to do so.

Well, if you already have all this you can continue with the tutorial

To build all CHB objects run this, in your shell:

	make all
	
You can define compatibility with your cross-compiler as follows:

	make all CROSS_PREFIX=<your cross prefix EJ. x86_64-elf, i386-elf...> 

You can also disable console echo with the following command, this can be 
used for debugging the makefile.

	make all V=<random value>
	
When CHB finishes compiling generates the following objects

	1) boot.IMG: The CHB bootsector, this is the stage1
	2) stage2.IMG: This image contains the stage2 of CHB
	3) CHB.IMG: is the union between boot.IMG and stage2.IMG



				2. How to Install CHB on raw image file
				
To install CHB on the raw image you need to create an empty image with dd:

	dd count=<your number of sectors> if=/dev/zero of=<your image name> bs=<your sector size>

Well, when you have the empty image created copy the CHB.img file to the 
first sectors of the disk:

	dd if=CHB.IMG of=<your image name> seek=0 conv=notrunc
	
Well done you have an image with CHB installed!

now, you can test the image with QEMU, BOCHS, or another debugger/emulator.

		3. How to Install your kernel on formatted CHB image

CHB by default load the kernel in the fifth sector on the physical 
address 0x100000, in protected mode, you can change these parameters 
by editing the CHB code and recompile it.

You need a formatted image of CHB, and copy your kernel in the fifth 
sector of your image, This kernel has to be a binary file not an executable.

	dd if=<your kernel raw image> of=<your image name> seek=5 conv=notrunc

			
